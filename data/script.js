// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
let statusUpdateInterval;
let isUpdating = false;

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener('DOMContentLoaded', function() {
    console.log('ESP32 OTA Dashboard loaded');
    addLogEntry('–°—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞', 'info');
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É
    refreshStatus();
    
    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 10 —Å–µ–∫—É–Ω–¥
    statusUpdateInterval = setInterval(refreshStatus, 10000);
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
async function refreshStatus() {
    try {
        const response = await fetch('/status');
        if (response.ok) {
            const data = await response.json();
            updateStatusDisplay(data);
        } else {
            throw new Error('HTTP ' + response.status);
        }
    } catch (error) {
        console.error('Error fetching status:', error);
        addLogEntry('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É: ' + error.message, 'error');
        showErrorStatus();
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
function updateStatusDisplay(data) {
    document.getElementById('version').textContent = data.version || '–ù–µ–≤—ñ–¥–æ–º–æ';
    document.getElementById('ip').textContent = data.ip || '–ù–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ';
    document.getElementById('wifi-status').textContent = data.wifi_status || '–ù–µ–≤—ñ–¥–æ–º–æ';
    document.getElementById('uptime').textContent = formatUptime(data.uptime || 0);
    
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É —Å—Ç–∞—Ç—É—Å—É Wi-Fi
    const wifiStatusElement = document.getElementById('wifi-status');
    if (data.wifi_status === 'connected') {
        wifiStatusElement.style.color = '#28a745';
    } else {
        wifiStatusElement.style.color = '#dc3545';
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –ø–æ–º–∏–ª–∫–∏ —Å—Ç–∞—Ç—É—Å—É
function showErrorStatus() {
    document.getElementById('version').textContent = '–ü–æ–º–∏–ª–∫–∞';
    document.getElementById('ip').textContent = '–ü–æ–º–∏–ª–∫–∞';
    document.getElementById('wifi-status').textContent = '–ü–æ–º–∏–ª–∫–∞';
    document.getElementById('uptime').textContent = '–ü–æ–º–∏–ª–∫–∞';
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É —Ä–æ–±–æ—Ç–∏
function formatUptime(seconds) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    
    if (hours > 0) {
        return `${hours}–≥ ${minutes}—Ö–≤ ${secs}—Å`;
    } else if (minutes > 0) {
        return `${minutes}—Ö–≤ ${secs}—Å`;
    } else {
        return `${secs}—Å`;
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É OTA –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
async function startOTA() {
    if (isUpdating) {
        addLogEntry('–û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è', 'warning');
        return;
    }
    
    if (!confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ OTA –æ–Ω–æ–≤–ª–µ–Ω–Ω—è? –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω.')) {
        return;
    }
    
    isUpdating = true;
    const updateBtn = document.getElementById('update-btn');
    updateBtn.disabled = true;
    updateBtn.textContent = 'üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è...';
    
    addLogEntry('–ó–∞–ø—É—Å–∫ OTA –æ–Ω–æ–≤–ª–µ–Ω–Ω—è...', 'info');
    
    try {
        const response = await fetch('/ota', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });
        
        if (response.ok) {
            const result = await response.json();
            addLogEntry('OTA –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—ñ—Ü—ñ–π–æ–≤–∞–Ω–æ: ' + result.status, 'success');
        } else {
            throw new Error('HTTP ' + response.status);
        }
    } catch (error) {
        console.error('Error starting OTA:', error);
        addLogEntry('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É OTA: ' + error.message, 'error');
    } finally {
        isUpdating = false;
        updateBtn.disabled = false;
        updateBtn.textContent = 'üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ OTA –æ–Ω–æ–≤–ª–µ–Ω–Ω—è';
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É –≤ –ª–æ–≥
function addLogEntry(message, type = 'info') {
    const logContainer = document.getElementById('log');
    const logEntry = document.createElement('div');
    logEntry.className = 'log-entry';
    
    const now = new Date();
    const timeString = now.toLocaleTimeString();
    
    let typeClass = '';
    switch (type) {
        case 'success':
            typeClass = 'log-success';
            break;
        case 'error':
            typeClass = 'log-error';
            break;
        case 'warning':
            typeClass = 'log-warning';
            break;
        default:
            typeClass = 'log-message';
    }
    
    logEntry.innerHTML = `
        <span class="log-time">[${timeString}]</span>
        <span class="${typeClass}">${message}</span>
    `;
    
    logContainer.appendChild(logEntry);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—Ä–æ–∫—Ä—É—á—É–≤–∞–Ω–Ω—è –¥–æ –∫—ñ–Ω—Ü—è
    logContainer.scrollTop = logContainer.scrollHeight;
    
    // –û–±–º–µ–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∑–∞–ø–∏—Å—ñ–≤ —É –ª–æ–∑—ñ (–º–∞–∫—Å–∏–º—É–º 50)
    while (logContainer.children.length > 50) {
        logContainer.removeChild(logContainer.firstChild);
    }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
function manualRefreshStatus() {
    addLogEntry('–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É...', 'info');
    refreshStatus();
}

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –º–µ—Ä–µ–∂—ñ
window.addEventListener('online', function() {
    addLogEntry('–ú–µ—Ä–µ–∂–µ–≤–µ –∑\'—î–¥–Ω–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ', 'success');
});

window.addEventListener('offline', function() {
    addLogEntry('–ú–µ—Ä–µ–∂–µ–≤–µ –∑\'—î–¥–Ω–∞–Ω–Ω—è –≤—Ç—Ä–∞—á–µ–Ω–æ', 'error');
});

// –û—á–∏—â–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
window.addEventListener('beforeunload', function() {
    if (statusUpdateInterval) {
        clearInterval(statusUpdateInterval);
    }
}); 