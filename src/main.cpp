#include <Arduino.h>
#include <WiFi.h>
#include <SPIFFS.h>
#include "config.h"
#include "lcd_manager.h"
#include "wifi_manager.h"
#include "telegram_bot.h"
#include "ota_updater.h"
#include "web_server.h"
#include "config_manager.h"
#include <FastBot.h>

// –ì–ª–æ–±–∞–ª—å–Ω—ñ –æ–±'—î–∫—Ç–∏
LCDManager lcdManager;
WiFiManager wifiManager;
TelegramBot telegramBot;
OTAUpdater otaUpdater;
WebServerManager webServer;
ConfigManager configManager;

// –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
unsigned long lastStatusUpdate = 0;
bool systemReady = false;

// –î–µ–∫–ª–∞—Ä–∞—Ü—ñ—è —Ñ—É–Ω–∫—Ü—ñ–π
void enterConfigMode();
void clearConfigs();

// –ì–ª–æ–±–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å Telegram
void sendNewMessage(FB_msg& msg) {
    String message = msg.text;
    String chatId = msg.chatID;
    
    if (message == "/start") {
        telegramBot.bot->sendMessage(chatId.c_str(), "ü§ñ ESP32 Bot started!\nUse /status, /version, /update");
    }
    else if (message == "/status") {
        telegramBot.sendStatus();
    }
    else if (message == "/version") {
        telegramBot.sendVersion();
    }
    else if (message == "/update") {
        telegramBot.bot->sendMessage(chatId.c_str(), "üîÑ Starting OTA update...");
        // –¢—É—Ç –±—É–¥–µ –≤–∏–∫–ª–∏–∫ OTA –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    }
    else if (message == "/clear") {
        telegramBot.bot->sendMessage(chatId.c_str(), "üóëÔ∏è Clearing all configurations...");
        clearConfigs();
    }
    else {
        telegramBot.bot->sendMessage(chatId.c_str(), "‚ùì Unknown command. Use /status, /version, /update, /clear");
    }
}

// –§—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É –¥–ª—è OTA
void onOTAUpdate(const String& status) {
    lcdManager.printOTAStatus(status);
    telegramBot.sendMessage("OTA Update: " + status);
}

void setup() {
    Serial.begin(115200);
    Serial.println("ESP32 OTA + LCD + Telegram + WebUI Starting...");
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ConfigManager
    configManager.begin();
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è LCD
    lcdManager.begin();
    lcdManager.printStatus("Starting");
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å Wi-Fi
    if (configManager.hasValidWiFiConfig()) {
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        WiFiConfig wifiConfig = configManager.getWiFiConfig();
        wifiManager.begin(wifiConfig.ssid, wifiConfig.password);
        
        if (wifiManager.connect()) {
            lcdManager.printIP(wifiManager.getLocalIP());
            systemReady = true;
            

            
            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram –±–æ—Ç–∞
            telegramBot.begin(BOT_TOKEN, CHAT_ID);
            telegramBot.setMessageHandler(sendNewMessage);
            
            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è OTA
            otaUpdater.begin(OTA_URL, FW_VERSION);
            otaUpdater.setUpdateCallback(onOTAUpdate);
            
            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–µ–±—Å–µ—Ä–≤–µ—Ä–∞
            webServer.setConfigManager(&configManager);
            webServer.begin();
            
            // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫
            telegramBot.sendMessage("üöÄ ESP32 started successfully!\nIP: " + wifiManager.getLocalIP() + "\nVersion: " + FW_VERSION);
            

            
            Serial.println("System initialized successfully!");
        } else {
            // –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è - –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ —Ä–µ–∂–∏–º –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
            enterConfigMode();
        }
    } else {
        // –ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å - –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ —Ä–µ–∂–∏–º –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        enterConfigMode();
    }
}

void enterConfigMode() {
    Serial.println("Entering configuration mode...");
    lcdManager.printStatus("Config");
    lcdManager.printIP("192.168.4.1");
    
    // –ó–∞–ø—É—Å–∫ —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø—É
    WiFi.mode(WIFI_AP);
    WiFi.softAP(CONFIG_MODE_SSID, CONFIG_MODE_PASSWORD);
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–µ–±—Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ä–µ–∂–∏–º—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
    webServer.setConfigManager(&configManager);
    webServer.beginConfigMode();
    
    Serial.println("Configuration mode started");
    Serial.println("SSID: " + String(CONFIG_MODE_SSID));
    Serial.println("Password: " + String(CONFIG_MODE_PASSWORD));
    Serial.println("IP: 192.168.4.1");
}

void clearConfigs() {
    configManager.clearConfigs();
    Serial.println("All configurations cleared");
    lcdManager.printStatus("Config Cleared");
    delay(2000);
    ESP.restart();
}

void loop() {
            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –º–æ–¥—É–ª—ñ–≤
        if (systemReady) {
            wifiManager.update();
            telegramBot.update();
            webServer.update();
            lcdManager.update();
        
        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
        if (millis() - lastStatusUpdate > 30000) {
            lastStatusUpdate = millis();
            
            if (wifiManager.isWiFiConnected()) {
                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
                static unsigned long lastUpdateCheck = 0;
                if (millis() - lastUpdateCheck > 300000) { // 5 —Ö–≤–∏–ª–∏–Ω
                    lastUpdateCheck = millis();
                    
                    if (otaUpdater.checkForUpdate()) {
                        telegramBot.sendMessage("üîÑ New firmware update available!");
                        lcdManager.printOTAStatus("Update Available");
                    }
                }
            }
        }
    } else {
        // –†–µ–∂–∏–º –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        webServer.update();
        
        // –ü–æ–∫–∞–∑—É—î–º–æ IP –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –Ω–∞ LCD
        static unsigned long lastLCDUpdate = 0;
        if (millis() - lastLCDUpdate > 5000) {
            lastLCDUpdate = millis();
            lcdManager.printStatus("Config");
            lcdManager.printIP("192.168.4.1");
        }
    }
    
    delay(100); // –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
} 